name: PR Coverage Check

on:
  pull_request:
    branches: [ main ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests with coverage
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing tests/ > coverage_output.txt 2>&1

    - name: Extract coverage summary
      run: |
        # Extract the coverage table from pytest output
        grep -A 50 "Name.*Stmts.*Miss.*Cover.*Missing" coverage_output.txt > coverage_summary.txt || true

        # Extract total coverage percentage
        TOTAL_COVERAGE=$(grep "TOTAL" coverage_output.txt | awk '{print $4}' | sed 's/%//' || echo "0")
        echo "TOTAL_COVERAGE=$TOTAL_COVERAGE" >> $GITHUB_ENV

        echo "## Coverage Summary" > coverage_comment.md
        echo "\`\`\`" >> coverage_comment.md
        cat coverage_summary.txt >> coverage_comment.md
        echo "\`\`\`" >> coverage_comment.md

    - name: Get changed files
      id: changed-files
      run: |
        # Get list of changed Python files in src/
        git fetch origin main
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '^src/.*\.py$' | tr '\n' ' ')
        echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "Changed Python files: $CHANGED_FILES"

    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const changedFiles = '${{ steps.changed-files.outputs.changed_files }}';
          const totalCoverage = '${{ env.TOTAL_COVERAGE }}';

          let coverageSummary = '';
          try {
            coverageSummary = fs.readFileSync('coverage_comment.md', 'utf8');
          } catch (error) {
            coverageSummary = 'Coverage summary not available';
          }

          let status = '‚úÖ';
          let message = 'Good coverage!';

          if (parseFloat(totalCoverage) < 50) {
            status = '‚ùå';
            message = `Coverage ${totalCoverage}% is below minimum threshold (50%)`;
          } else if (parseFloat(totalCoverage) < 70) {
            status = '‚ö†Ô∏è';
            message = `Coverage ${totalCoverage}% meets minimum but could be improved (target: 80%)`;
          } else if (parseFloat(totalCoverage) < 80) {
            status = 'üëç';
            message = `Coverage ${totalCoverage}% is good (target: 80%)`;
          }

          const comment = `## ${status} Coverage Report

          **Overall Coverage: ${totalCoverage}%**

          ${message}

          ${coverageSummary}

          ### Changed Files in this PR:
          ${changedFiles ? changedFiles.split(' ').map(f => `- \`${f}\``).join('\n') : '_No Python source files changed_'}

          ---

          üìã **Coverage Thresholds:**
          - üéØ **Target**: 80% overall coverage
          - üëç **Good**: 70%+ overall coverage
          - ‚ö†Ô∏è **Warning**: 50-70% overall coverage
          - ‚ùå **Failure**: <50% overall coverage

          üìä [View detailed coverage report in job artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          _Generated by GitHub Actions_`;

          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(comment =>
            comment.body.includes('Coverage Report') && comment.user.type === 'Bot'
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
          coverage_output.txt
          coverage_summary.txt

    - name: Check minimum coverage threshold
      run: |
        COVERAGE=${{ env.TOTAL_COVERAGE }}
        MIN_THRESHOLD=50

        if (( $(echo "$COVERAGE < $MIN_THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below minimum threshold of $MIN_THRESHOLD%"
          echo "Please add tests to improve coverage before merging."
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets minimum threshold of $MIN_THRESHOLD%"
        fi
